# FFT config for Llama 70B.
# Borrows param values from:
# https://github.com/pytorch/torchtune/blob/main/recipes/configs/llama3_1/70B_full.yaml
#
# Strongly recommend downloading the model first:
# HF_HUB_ENABLE_HF_TRANSFER=1 hf download meta-llama/Llama-3.1-70B-Instruct --exclude original/*
#
# Requirements:
#   - Log into WandB (`wandb login`) or disable `enable_wandb`
#   - Log into HF: `hf auth login`
#   - Request access to Llama 3.1: https://huggingface.co/meta-llama/Llama-3.1-70B-Instruct
#
# Usage:
#   oumi train -c configs/recipes/llama3_1/sft/70b_full/train.yaml
#
# Command to run locally on a single-node 8xA100-80GB machine:
#   oumi distributed torchrun -m oumi train -c configs/recipes/llama3_1/sft/70b_full/train.yaml
#
# See Also:
#   - Documentation: https://oumi.ai/docs/en/latest/user_guides/train/train.html
#   - Config class: oumi.core.configs.TrainingConfig
#   - Config source: https://github.com/oumi-ai/oumi/blob/main/src/oumi/core/configs/training_config.py
#   - Other training configs: configs/**/*train.yaml

model:
  model_name: "meta-llama/Llama-3.1-70B-Instruct"
  model_max_length: 2048
  torch_dtype_str: "bfloat16"
  attn_implementation: "sdpa"
  load_pretrained_weights: True
  trust_remote_code: True

data:
  train:
    datasets:
      - dataset_name: "yahma/alpaca-cleaned" # 51,760 examples
    target_col: "prompt"

training:
  trainer_type: "TRL_SFT"
  save_steps: 200
  num_train_epochs: 1
  per_device_train_batch_size: 7
  gradient_accumulation_steps: 1

  enable_gradient_checkpointing: True
  gradient_checkpointing_kwargs:
    use_reentrant: False
  ddp_find_unused_parameters: False
  optimizer: "adamw_torch_fused"
  learning_rate: 2.0e-05
  compile: False

  dataloader_num_workers: "auto"
  dataloader_prefetch_factor: 32

  logging_steps: 100
  log_model_summary: False
  empty_device_cache_steps: 50
  output_dir: "output/llama70b.fft"
  include_performance_metrics: True
  enable_wandb: True

fsdp:
  enable_fsdp: True
  cpu_offload: True
  forward_prefetch: True
  state_dict_type: "SHARDED_STATE_DICT"
  auto_wrap_policy: "TRANSFORMER_BASED_WRAP"
  transformer_layer_cls: "LlamaDecoderLayer"
