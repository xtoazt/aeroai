[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
oumi = ["LICENSE", "README.md", "*.jinja"]

[tool.setuptools_scm]
# default scm config.

[tool.setuptools]
# default setuptools config.

# We currently use the Omegaconf dev version, and uv doesn't allow pre-release versions
# by default.
[tool.uv]
prerelease = "allow"

[project]
name = "oumi"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.9,<3.13"
description = "Oumi - Modeling Platform"
authors = [{ name = "Oumi Team", email = "contact@oumi.ai" }]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "accelerate>=1.10.0,<2.0",
    "aiohttp>=3.12,<3.16",          # Used by inference engine
    "aiofiles>=24.1.0,<25",         # Allows to use async file operations
    "aioresponses>=0.7,<0.8",     # User by inference engine tests
    "backoff>=2.2.1,<2.3",
    "click<8.3.0",                  # Used by CLI. 8.2.0 is currently unsupported by Typer.
    "datasets>=3.2,<3.3",           # breaking change for 4.0
    "hdrhistogram>=0.10,<0.11",
    "jsonlines",
    "lm_eval[wandb]>=0.4,<0.5.0",
    "mlflow>=3.1",                # >=3.1.4 requires Python3.10>=
    "numpy>=1.26,<2.4",           # verl==0.5.0 depends on numpy<2.0.0
    # The latest stable version, 2.3.0, is two years old and is causing dependency
    # conflicts. We'll use the dev version until a new stable version is released.
    # See https://github.com/oumi-ai/oumi/issues/1377
    # We pin the exact dev version so that the --pre flag isn't needed for uv pip install.
    "omegaconf==2.4.0.dev3",
    "packaging",
    "pandas>=2.3,<3",
    "peft>=0.17,<0.18",
    "pexpect>=4.9,<4.10",       # Used by Polaris client
    "pillow>=11.3,<11.4",      # Used by image datasets
    "protobuf>=6.32",
    "pydantic>=2.11,<2.12",
    "responses>=0.25,<0.26",
    "safetensors>=0.6,<0.7",
    "skypilot>=0.10.2,<0.11",    # 0.10.2 and above is needed
    "tensorboard>=2.20,<2.21",  # Optional, for monitoring training
    "torch>=2.6,<2.9.0",       # vllm only supports up to torch==2.7
    "torchao>=0.12,<0.13",     # Used by transformers
    # torchdata 0.10 drops support for datapipes which we currently use
    # also, torchdata does not provide a py13 wheel for version 0.9.0.
    # if python > 3.13, install from source for now.
    "torchdata>=0.9,<0.10.0",  # Used by data pipes loader
    "torchvision>=0.21,<0.24", # Used by some VLM-s (multimodal)
    "tqdm",
    # Llama Vision attention is broken as late as 4.48.2 if gradient checkpointing is
    # enabled. See OPE-875 and https://github.com/huggingface/transformers/issues/36040.
    "transformers>=4.56,<4.57",
    "trl>=0.21,<0.22",
    "typer",                      # Used by CLI
    "typing_extensions",          # Backports of typing updates to python 3.9
    "wandb>=0.21,<0.22",        # Logging to Weights and Biases.
]

[project.urls]
Homepage = "https://github.com/oumi-ai/oumi"
Issues = "https://github.com/oumi-ai/oumi/issues"

[project.optional-dependencies]
dev = [
    "ipykernel",
    "ipywidgets",     # Interactive widgets for Jupyter notebooks
    "jupyterlab",
    "nbconvert",      # For notebook execution in tests
    "nbformat",       # For notebook execution in tests
    "pre-commit",
    "pyright",
    "pytest-asyncio", # Asyncio plugin for pytest
    "pytest-cov",     # Test coverage plugin for pytest
    "pytest-timeout", # Timeout plugin for pytest
    "pytest",
    "responses",
    "ruff",
    "torchfix",       # Tool for automatically fixing common PyTorch issues
]
docs = [
    "myst_parser",             # Allows us to write docs in markdown
    "myst-nb",                 # Allows us to include ipython notebooks in the docs
    "sphinx-book-theme",       # Alternative to sphinx-rtd-theme
    "sphinx-copybutton",       # Add copy button to code blocks in Sphinx
    "sphinx-design",           # Allows us to include tabs in the docs
    "sphinx-rtd-theme>=3.0.1", # Readthedocs theme for Sphinx
    "sphinx",                  # Used to build the docs
    "sphinxcontrib-bibtex",    # Allows us to cite bibtex references in the docs
    "sphinxcontrib-mermaid",   # Enable mermaid diagrams in the docs
    "sphinxcontrib-typer",     # Allows us to include typer CLI in the docs
]

# Useful dependencies when running on GPU
gpu = [
    "liger-kernel>=0.6,<0.7",
    "nvidia-ml-py>=13.580,<13.581",
    "bitsandbytes>=0.47,<0.48",      # Used for QLora, and PagedAdam implementation
    # When updating verl version, make sure to also update the default config:
    # src/oumi/core/trainers/verl_trainer_config.yaml.
    "verl>=0.5,<0.6",   # Used for the VERL_GRPO trainer.
    "vllm>=0.10,<0.11", # For VLLMInferenceEngine, and vLLM-powered GRPO training.
    "deepspeed>=0.17.0,<0.18.0"
]

# Targets for supported cloud providers
aws = ["skypilot[aws]"]
azure = ["skypilot[azure]"]
gcp = [
    "google-api-core>=2.25",
    "google-api-python-client",
    "google-auth>=2.40",
    "google-cloud-core>=2.4",
    "google-cloud-storage>=3.3",
    "skypilot[gcp]",
]
lambda = ["skypilot[lambda]"]
runpod = ["skypilot[runpod]"]

synthesis = [
    "pdftext>=0.6.3", # Document ingestion for synthesis
]

# Flash Attention - separate group due to special installation requirements
flash_attn = [
    # Note: May require manual installation with: pip install flash-attn --no-build-isolation
    # This is kept separate to avoid breaking existing environments
    "flash-attn>=2.0.0",
]

evaluation = [
    "alpaca-eval>=0.6,<0.7",
    "langdetect",                   # leaderboard_ifeval
    "immutabledict",                # leaderboard_ifeval
    "nltk>=3.9",                  # leaderboard_ifeval
    "antlr4-python3-runtime==4.11", # leaderboard_math_hard
    "sympy>=1.14",                  # leaderboard_math_hard
    "sentencepiece>=0.2.0",
]

quantization = ["autoawq>=0.2,<0.3", "bitsandbytes>=0.47,<0.48"]

bitnet = ["onebitllms>=0.0.3"]

cambrian = [
    "timm==0.9.16",
    "open_clip_torch",
    "diffusers[torch]",
    "einops==0.6.1",
]

file_formats = ["pdf2image>=1.17,<1.18", "python-poppler>=0.4,<0.5"]

llama_cpp = ["llama-cpp-python>=0.3.5,<0.4"]

# CI targets
ci_cpu = [
    "oumi[dev,docs,gcp,synthesis]",
    "vllm>=0.10,<0.11",           # For VLLMInferenceEngine
    # This may fail to install. As a temporary workaround, run:
    # CMAKE_ARGS="-DLLAVA_BUILD=OFF" pip install -U llama-cpp-python
    "llama-cpp-python>=0.3,<0.4", # For LlamaCppInferenceEngine
]
# llama-cpp-python is not compatible with the github
# gpu actions runner, so we skip it for now
ci_gpu = ["oumi[dev,docs,gcp,gpu,synthesis]", "alpaca-eval>=0.6,<0.7"]

[project.scripts]
oumi = "oumi.cli.main:run"

[tool.ruff]
extend-include = [
    "*.ipynb", # Include ipython notebooks
]
line-length = 88


[tool.ruff.lint]
select = [
    "ASYNC", # flake8-async: check for async/await syntax
    "D",     # pydocstyle: check docstring style
    "E",     # pycodestyle: errors
    "F",     # pyflakes: detect various errors
    "I",     # isort: check import order
    "ICN",   # flake-8 import conventions,
    "INT",   # flake8-gettext
    "LOG",   # flake8-logging-format: check for logging format,
    "NPY",   # NumPy-specific rules
    "PD",    # pandas vet
    "PTH",   # pathlib
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise, use raise statements instead of return statements
    "TID",   # flake8-tidy-imports: check import tidiness
    "UP",    # pyupgrade: check for Python syntax updates
    "W",     # pycodestyle: warnings
]
ignore = [
    "D100",   # Missing docstring in public module, temporary, OPE-326
    "D101",   # Missing docstring in public class, temporary, OPE-326
    "NPY002", # Replace legacy numpy aliases
    "PTH123", # pathlib: `open()` should be replaced by `Path.open()`
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all" # Disallow all relative imports.

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "PTH"] # Ignore docstring checks in tests
"src/oumi/models/experimental/cambrian/**" = [
    "F401",   # Ignore pyflakes: `torch_xla` imported but unused;
    "F601",   # Ignore pyflakes: Dictionary key literal `"mistral_v2"` repeated
    "F841",   # Ignore pyflakes: Local variable is assigned but never used
    "E501",   # Ignore pycodestyle: Line too long
    "E701",   # Ignore pycodestyle: Multiple statements on one line
    "E721",   # Ignore pycodestyle: Do not compare types, use `isinstance()`
    "E722",   # Ignore pycodestyle: Do not use bare `except`
    "E731",   # Ignore pycodestyle: Do not assign a `lambda` expression, use a `def`
    "E741",   # Ignore pycodestyle: Ambiguous variable name
    "D",      # Ignore docstring checks in Cambrian
    "TID252", # Ignore flake8-tidy-imports: Prefer absolute imports over relative imports
    "W291",   # Ignore pycodestyle: warnings: Trailing whitespace
    "UP035",  # UP035 `typing.List` is deprecated, use `list` instead
    "UP006",  # UP006 Use `list` instead of `List` for type annotation
]
"src/oumi/utils/verl_model_merger.*" = [
    "E501", # Line too long
    "D",    # Ignore docstring checks
    "PTH",  # Ignore pathlib checks
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["oumi"]

[tool.pyright]
include = ["src/oumi/**", "tests/**"]
exclude = [
    "src/oumi/models/experimental/cambrian/**",
    "src/oumi/core/types/proto/**",
    "src/oumi/utils/verl_model_merger.py",
]
typeCheckingMode = "basic"
pythonVersion = "3.9"
pythonPlatform = "All" # Include linux, mac, windows

reportPrivateImportUsage = "none"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
addopts = ["--import-mode=prepend"]
filterwarnings = [
    # Warnings from mlflow dependency that we can't fix
    "ignore:Support for class-based `config` is deprecated.*:DeprecationWarning",
    "ignore:builtin type .* has no __module__ attribute:DeprecationWarning",
]
markers = [
    "e2e: Slow e2e integration tests",
    "e2e_eternal: Extremely slow e2e integration tests (for manual/selective runs)",
    "single_gpu: The test uses max 1 GPU (can be potentially skipped on multi-GPU machine to conserve GPU resources)",
    "multi_gpu: The test should run on a machine with multiple GPU-s",
]
